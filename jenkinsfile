#!/usr/bin/env groovy

node ('ec2-fleet') {
	stage('Environment Setup') {
		properties([
			buildDiscarder(logRotator(numToKeepStr: '10')),
		])
	}
    ansiColor('xterm') {

        stage('SCM Checkout') {
                checkout(scm)
            }
        stage('ECR Repo Init') {
            dir('MI-infra') {
                git branch: 'main',
                    url: 'git@github.com:roeP/MI-infra.git',
                    credentialsId: 'github-creds'
            }
            
            docker.image("hashicorp/terraform:1.0.7").inside("-u root:root --entrypoint=''") {
                dir('MI-infra/live/ecr') {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "AWS",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            terraform init --reconfigure -backend-config key="ecr.state"
                            terraform plan -input=false
                            terraform apply -auto-approve=true -input=false
                        """
                        env.ECR_REPO=sh (
                            script: 'terraform output -raw repository_url',
                            returnStdout: true
                        )
                    }
                }
            }
        }

        stage('Docker Build') {
            sh "docker build -t ${ECR_REPO}/mi-app:${BUILD_NUMBER} ."
        }

        stage('Docker Push') {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "AWS",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
                sh "docker push ${ECR_REPO}/mi-app:${BUILD_NUMBER}"
            }
        }
    }
}
